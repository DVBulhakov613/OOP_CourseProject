top priorities:
- implement functionality
-- considering the amount of fields, i can probably use the get; set; properties instead of methods for validation
- add tests to cover important cases
- expand to UI
- add more features in general?
- think through the design of both UI and backend
- think through how to handle the data
- think through how to handle multiple Employee roles
-- specifically, how to handle access to different parts of the system for the same Employee
--- how to handle this in the UI is also very important
- figure out *good* places to add delegates and events

- more interfaces could be good!
-- define common behavior for classes and use interfaces for it

!!! forget everything! dive into SQLite and VROOM implementation, its cool as shit!

1.	BaseLocation and its inherited classes (Warehouse, PostalOffice) ; describes any fixed location that the company owns 1.1. cannot be deleted if:
•	there are employees assigned to them
•	there are packages assigned to them, either in storage or if they are an active delivery destination 1.2. can be created by:
•	Administrator 1.3. can be edited by:
•	Administrator
•	Manager
2.	Package ; the package itself, has a lot of parameters most of which are other objects 2.1. cannot be deleted if:
•	They have either not been delivered yet, or their delivery has not been cancelled (or the package has been returned) 2.2. can be created by (requires a BaseLocation or other fixed location as the starting point):
•	Administrator
•	Manager
•	Employee 2.3. can be edited by:
•	Administrator
•	Manager
3 PackageEvent ; log-type class that logs events that happen to packages 3.1 cannot be deleted if:
•	can always be deleted 3.2 can be created by (requires a Package to create from):
•	Administrator
•	Manager
•	Employee 3.3. can be edited by:
•	Administrator
•	Manager
4.	Content ; describes the contents of a package 4.1. cannot be deleted if:
•	Package has not been delivered yet 4.2. can be created by:
•	Administrator
•	Manager
•	Employee 4.3. can be edited by:
•	Administrator
•	Manager
5.	Employee classes and such 5.1. Employee ; works the everyday systems, such as filling out package forms 5.1.1. cannot be deleted if:
•	can always be deleted 5.1.2. can be created by:
•	Administrator
•	Manager 5.1.3. can be edited by:
•	Administrator
•	Manager 5.2. Manager ; manages one or more locations 5.2.1. cannot be deleted if:
•	no replacement manager at location (there must always be a manager present) 5.2.2. can be created by:
•	Administrator 5.2.3. can be edited by:
•	Administrator 5.3. Administrator ; has control of basically all systems 5.3.1. cannot be deleted if:
•	there are no other administrators in the system 5.3.2. can be created by:
•	Administrator 5.3.3. can be edited by:
•	Administrator (higher than the administrator would only be the software developers, who have the highest possible access by the fact that they have direct access and knowledge to operate the system's code. no that is not a role within the system)
then there's Country, Coordinates classes, interfaces, enums, but they are relevant in more of a static way rather than relative



low priorities:
- add more tests to cover all cases
- idk


potential features:
- implement an Authentication system
- implement a Report / Feedback system
- statistics



misc:
- phone number validation for Person?
- method to update email?

- method to update Package.CurrentLocation?
- method to update Package.Log?
- ensure validation of Package.PackageID

- ensure valid range for Coordinates.Latitude and Coordinates.Longitude

- ensure validation of BaseLocation.LocationID
- methods to manage Staff and StoredPackages



// chain of delivery mockup

1. Someone comes up to the postal office, with stuff they want to send
- not possible to do within the system

2. Said stuff is either already packaged, or will be packaged in the postal office
- again, not possible to do within the system

3. Clerk fills out the package form
3.S - the system creates a new "Package" object
- that would be the "Package" class
- how is it created?
-- the package is created with a unique ID, and the current location is set to the postal office where it was created; may want to rethink that one actually., change currentlocation to "last known location" or something like that maybe
- how is it delivered?
-- the package is assigned to a route based on its destination and current location, which is then assigned to a delivery vehicle; all this should be done through the "RouteService" STATIC class

4. Clerk takes the package, and puts it into storage until delivery - so the basic package "status" should be "stored" to avoid additional steps
4.S - in the meantime, the system should have already assigned it to a route
- that would be the RouteService's job, a static class which produces a route based on the package's destination and current location
- pathfinding? i would need a map API for this but, eh i guess i can "simulate" it for now

5. Packages are batched in a single truck until they are delivered to the next stop - once the truck leaves the station, all of the packages associated with the truck have their status changed to "In transit" and thus not tied to any location other than the truck's
5.S - step 4.S already explained how this would work, but the system would pick out a truck that is going the same way and can fit the package within its calculated volume (with a reasonable margin of leeway to account for imperfect packing); this can be overriden by an employee if the truck cannot fit the package
5.S2 if the package is not confirmed to be in the truck at the next stop, it is marked as "Lost" either by the system, or the employees 

6. Once the package arrives at a stop (such as a warehouse), it is reassigned to the truck that will take it to the next stop (so repeating from step 4 until final destination)

7. Once at destination (most likely a postal office), the package will stay in storage until either pickup by the client or adress delivery (neither of which im sure how to implement)