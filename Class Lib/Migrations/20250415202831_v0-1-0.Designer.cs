// <auto-generated />
using System;
using Class_Lib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Class_Lib.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250415202831_v0-1-0")]
    partial class v010
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Class_Lib.Backend.Person_related.Client", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Class_Lib.BaseLocation", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("GeoDataLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("GeoDataLongitude")
                        .HasColumnType("REAL");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("WarehouseType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("GeoDataLongitude", "GeoDataLatitude");

                    b.ToTable("Locations");

                    b.HasDiscriminator<string>("WarehouseType").HasValue("BaseLocation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Class_Lib.Content", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<uint>("PackageID")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name", "PackageID");

                    b.HasIndex("PackageID");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Class_Lib.Coordinates", b =>
                {
                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Longitude", "Latitude");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("Class_Lib.Employee", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("WorkplaceID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("WorkplaceID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Class_Lib.Package", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CurrentLocationLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentLocationLongitude")
                        .HasColumnType("REAL");

                    b.Property<int>("PackageStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<uint>("ReceiverID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<uint>("SenderID")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SentFromID")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SentToID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.HasIndex("SentFromID");

                    b.HasIndex("SentToID");

                    b.HasIndex("CurrentLocationLongitude", "CurrentLocationLatitude");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Class_Lib.PackageEvent", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<uint>("PackageID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("LocationLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("LocationLongitude")
                        .HasColumnType("REAL");

                    b.HasKey("Timestamp", "PackageID");

                    b.HasIndex("PackageID");

                    b.HasIndex("LocationLongitude", "LocationLatitude");

                    b.ToTable("PackageEvents");
                });

            modelBuilder.Entity("Class_Lib.Warehouse", b =>
                {
                    b.HasBaseType("Class_Lib.BaseLocation");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MaxStorageCapacity")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Warehouse");
                });

            modelBuilder.Entity("Class_Lib.PostalOffice", b =>
                {
                    b.HasBaseType("Class_Lib.Warehouse");

                    b.Property<bool>("HandlesPublicDropOffs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRegionalHQ")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("PostalOffice");
                });

            modelBuilder.Entity("Class_Lib.BaseLocation", b =>
                {
                    b.HasOne("Class_Lib.Coordinates", "GeoData")
                        .WithMany()
                        .HasForeignKey("GeoDataLongitude", "GeoDataLatitude")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeoData");
                });

            modelBuilder.Entity("Class_Lib.Content", b =>
                {
                    b.HasOne("Class_Lib.Package", "Package")
                        .WithMany("DeclaredContent")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Class_Lib.Employee", b =>
                {
                    b.HasOne("Class_Lib.BaseLocation", "Workplace")
                        .WithMany("Staff")
                        .HasForeignKey("WorkplaceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("Class_Lib.Package", b =>
                {
                    b.HasOne("Class_Lib.Backend.Person_related.Client", "Receiver")
                        .WithMany("PackagesReceived")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Backend.Person_related.Client", "Sender")
                        .WithMany("PackagesSent")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Warehouse", "SentFrom")
                        .WithMany("StoredPackages")
                        .HasForeignKey("SentFromID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Warehouse", "SentTo")
                        .WithMany()
                        .HasForeignKey("SentToID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Coordinates", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationLongitude", "CurrentLocationLatitude")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLocation");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("SentFrom");

                    b.Navigation("SentTo");
                });

            modelBuilder.Entity("Class_Lib.PackageEvent", b =>
                {
                    b.HasOne("Class_Lib.Package", "Package")
                        .WithMany("Log")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Class_Lib.Coordinates", "Location")
                        .WithMany()
                        .HasForeignKey("LocationLongitude", "LocationLatitude")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Class_Lib.Backend.Person_related.Client", b =>
                {
                    b.Navigation("PackagesReceived");

                    b.Navigation("PackagesSent");
                });

            modelBuilder.Entity("Class_Lib.BaseLocation", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Class_Lib.Package", b =>
                {
                    b.Navigation("DeclaredContent");

                    b.Navigation("Log");
                });

            modelBuilder.Entity("Class_Lib.Warehouse", b =>
                {
                    b.Navigation("StoredPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
