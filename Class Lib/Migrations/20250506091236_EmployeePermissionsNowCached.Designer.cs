// <auto-generated />
using System;
using Class_Lib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Class_Lib.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250506091236_EmployeePermissionsNowCached")]
    partial class EmployeePermissionsNowCached
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Class_Lib.Backend.Person_related.Client", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Class_Lib.Backend.Services.Permission", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Name = "LocalPermissions"
                        },
                        new
                        {
                            ID = 2L,
                            Name = "GlobalPermissions"
                        },
                        new
                        {
                            ID = 10L,
                            Name = "ReadPackage"
                        },
                        new
                        {
                            ID = 11L,
                            Name = "CreatePackage"
                        },
                        new
                        {
                            ID = 12L,
                            Name = "UpdatePackage"
                        },
                        new
                        {
                            ID = 13L,
                            Name = "DeletePackage"
                        },
                        new
                        {
                            ID = 20L,
                            Name = "ReadEvent"
                        },
                        new
                        {
                            ID = 21L,
                            Name = "CreateEvent"
                        },
                        new
                        {
                            ID = 22L,
                            Name = "UpdateEvent"
                        },
                        new
                        {
                            ID = 23L,
                            Name = "DeleteEvent"
                        },
                        new
                        {
                            ID = 30L,
                            Name = "ReadContent"
                        },
                        new
                        {
                            ID = 31L,
                            Name = "CreateContent"
                        },
                        new
                        {
                            ID = 32L,
                            Name = "UpdateContent"
                        },
                        new
                        {
                            ID = 33L,
                            Name = "DeleteContent"
                        },
                        new
                        {
                            ID = 40L,
                            Name = "ReadPerson"
                        },
                        new
                        {
                            ID = 41L,
                            Name = "CreatePerson"
                        },
                        new
                        {
                            ID = 42L,
                            Name = "UpdatePerson"
                        },
                        new
                        {
                            ID = 43L,
                            Name = "DeletePerson"
                        },
                        new
                        {
                            ID = 50L,
                            Name = "ReadLocation"
                        },
                        new
                        {
                            ID = 51L,
                            Name = "CreateLocation"
                        },
                        new
                        {
                            ID = 52L,
                            Name = "UpdateLocation"
                        },
                        new
                        {
                            ID = 53L,
                            Name = "DeleteLocation"
                        },
                        new
                        {
                            ID = 60L,
                            Name = "ReadReport"
                        },
                        new
                        {
                            ID = 61L,
                            Name = "CreateReport"
                        },
                        new
                        {
                            ID = 62L,
                            Name = "UpdateReport"
                        },
                        new
                        {
                            ID = 63L,
                            Name = "DeleteReport"
                        },
                        new
                        {
                            ID = 70L,
                            Name = "ReadDeliveryVehicle"
                        },
                        new
                        {
                            ID = 71L,
                            Name = "CreateDeliveryVehicle"
                        },
                        new
                        {
                            ID = 72L,
                            Name = "UpdateDeliveryVehicle"
                        },
                        new
                        {
                            ID = 73L,
                            Name = "DeleteDeliveryVehicle"
                        },
                        new
                        {
                            ID = 80L,
                            Name = "ReadContentType"
                        },
                        new
                        {
                            ID = 81L,
                            Name = "CreateContentType"
                        },
                        new
                        {
                            ID = 82L,
                            Name = "UpdateContentType"
                        },
                        new
                        {
                            ID = 83L,
                            Name = "DeleteContentType"
                        },
                        new
                        {
                            ID = 90L,
                            Name = "ReadPackageStatus"
                        },
                        new
                        {
                            ID = 91L,
                            Name = "CreatePackageStatus"
                        },
                        new
                        {
                            ID = 92L,
                            Name = "UpdatePackageStatus"
                        },
                        new
                        {
                            ID = 93L,
                            Name = "DeletePackageStatus"
                        },
                        new
                        {
                            ID = 100L,
                            Name = "ReadPackageType"
                        },
                        new
                        {
                            ID = 101L,
                            Name = "CreatePackageType"
                        },
                        new
                        {
                            ID = 102L,
                            Name = "UpdatePackageType"
                        },
                        new
                        {
                            ID = 103L,
                            Name = "DeletePackageType"
                        },
                        new
                        {
                            ID = 110L,
                            Name = "ReadCountry"
                        },
                        new
                        {
                            ID = 111L,
                            Name = "CreateCountry"
                        },
                        new
                        {
                            ID = 112L,
                            Name = "UpdateCountry"
                        },
                        new
                        {
                            ID = 113L,
                            Name = "DeleteCountry"
                        },
                        new
                        {
                            ID = 120L,
                            Name = "ReadUser"
                        },
                        new
                        {
                            ID = 121L,
                            Name = "CreateUser"
                        },
                        new
                        {
                            ID = 122L,
                            Name = "UpdateUser"
                        },
                        new
                        {
                            ID = 123L,
                            Name = "DeleteUser"
                        });
                });

            modelBuilder.Entity("Class_Lib.Backend.Services.Role", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Class_Lib.Backend.Services.RolePermission", b =>
                {
                    b.Property<long>("RoleID")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionID")
                        .HasColumnType("bigint");

                    b.HasKey("RoleID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Class_Lib.BaseLocation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("EmployeeID")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Locations", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Class_Lib.Content", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("PackageID")
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Name", "PackageID");

                    b.HasIndex("PackageID");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Class_Lib.Employee", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("RoleID")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("WorkplaceID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("WorkplaceID");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Class_Lib.Package", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrentLocationID")
                        .HasColumnType("bigint");

                    b.Property<long>("PackageID")
                        .HasColumnType("bigint");

                    b.Property<int>("PackageStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("ReceiverID")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("SenderID")
                        .HasColumnType("bigint");

                    b.Property<long>("SentFromID")
                        .HasColumnType("bigint");

                    b.Property<long>("SentToID")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<long?>("WarehouseID")
                        .HasColumnType("bigint");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CurrentLocationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.HasIndex("SentFromID");

                    b.HasIndex("SentToID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Class_Lib.PackageEvent", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<long>("PackageID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationID")
                        .HasColumnType("bigint");

                    b.HasKey("Timestamp", "PackageID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageEvents");
                });

            modelBuilder.Entity("Class_Lib.User", b =>
                {
                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PersonID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Class_Lib.Warehouse", b =>
                {
                    b.HasBaseType("Class_Lib.BaseLocation");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("bit");

                    b.Property<long>("MaxStorageCapacity")
                        .HasColumnType("bigint");

                    b.ToTable("Warehouses", (string)null);
                });

            modelBuilder.Entity("Class_Lib.PostalOffice", b =>
                {
                    b.HasBaseType("Class_Lib.Warehouse");

                    b.Property<bool>("HandlesPublicDropOffs")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegionalHQ")
                        .HasColumnType("bit");

                    b.ToTable("PostalOffices", (string)null);
                });

            modelBuilder.Entity("Class_Lib.Backend.Services.RolePermission", b =>
                {
                    b.HasOne("Class_Lib.Backend.Services.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Class_Lib.Backend.Services.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Class_Lib.BaseLocation", b =>
                {
                    b.HasOne("Class_Lib.Employee", null)
                        .WithMany("ManagedLocations")
                        .HasForeignKey("EmployeeID");

                    b.OwnsOne("Class_Lib.Coordinates", "GeoData", b1 =>
                        {
                            b1.Property<long>("BaseLocationID")
                                .HasColumnType("bigint");

                            b1.Property<string>("Address")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Address");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("Latitude");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("Longitude");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Region");

                            b1.HasKey("BaseLocationID");

                            b1.ToTable("Locations");

                            b1.WithOwner()
                                .HasForeignKey("BaseLocationID");
                        });

                    b.Navigation("GeoData")
                        .IsRequired();
                });

            modelBuilder.Entity("Class_Lib.Content", b =>
                {
                    b.HasOne("Class_Lib.Package", "Package")
                        .WithMany("DeclaredContent")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Class_Lib.Employee", b =>
                {
                    b.HasOne("Class_Lib.Backend.Services.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Class_Lib.BaseLocation", "Workplace")
                        .WithMany("Staff")
                        .HasForeignKey("WorkplaceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");

                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("Class_Lib.Package", b =>
                {
                    b.HasOne("Class_Lib.BaseLocation", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Backend.Person_related.Client", "Receiver")
                        .WithMany("PackagesReceived")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Backend.Person_related.Client", "Sender")
                        .WithMany("PackagesSent")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Warehouse", "SentFrom")
                        .WithMany("PackagesSentFromHere")
                        .HasForeignKey("SentFromID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Warehouse", "SentTo")
                        .WithMany("PackagesSentToHere")
                        .HasForeignKey("SentToID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Class_Lib.Warehouse", null)
                        .WithMany("StoredPackages")
                        .HasForeignKey("WarehouseID");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("SentFrom");

                    b.Navigation("SentTo");
                });

            modelBuilder.Entity("Class_Lib.PackageEvent", b =>
                {
                    b.HasOne("Class_Lib.BaseLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Class_Lib.Package", "Package")
                        .WithMany("Log")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Class_Lib.User", b =>
                {
                    b.HasOne("Class_Lib.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("Class_Lib.User", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Class_Lib.Warehouse", b =>
                {
                    b.HasOne("Class_Lib.BaseLocation", null)
                        .WithOne()
                        .HasForeignKey("Class_Lib.Warehouse", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Class_Lib.PostalOffice", b =>
                {
                    b.HasOne("Class_Lib.Warehouse", null)
                        .WithOne()
                        .HasForeignKey("Class_Lib.PostalOffice", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Class_Lib.Backend.Person_related.Client", b =>
                {
                    b.Navigation("PackagesReceived");

                    b.Navigation("PackagesSent");
                });

            modelBuilder.Entity("Class_Lib.Backend.Services.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Class_Lib.Backend.Services.Role", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Class_Lib.BaseLocation", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Class_Lib.Employee", b =>
                {
                    b.Navigation("ManagedLocations");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Class_Lib.Package", b =>
                {
                    b.Navigation("DeclaredContent");

                    b.Navigation("Log");
                });

            modelBuilder.Entity("Class_Lib.Warehouse", b =>
                {
                    b.Navigation("PackagesSentFromHere");

                    b.Navigation("PackagesSentToHere");

                    b.Navigation("StoredPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
